#!/usr/bin/env python3

"""
************************************************************************************
Copyright 2018 (C) AeroSys Engineering, Inc.
All Rights Reserved

This source code is provided with no warranty expressed or implied.  Suitability for
any purpose is not guaranteed.
************************************************************************************

Revision History:

2018-06-10, ksb, created
"""

import sys
sys.path.append("..")

import datetime
import pytz

# define a version for this file
VERSION = "1.0.2018-06-10a"

def rainprocessor():
  def __init__(self, timezone, datapath):
    self.timezone = timezone
    self.datapath = datapath
    return
  
  def update_timestamp(self):
    # get a new timestamp
    timestamp = datetime.datetime.now(pytz.timezone(self.timezone))
    
    # did we change years?
    if self.last_timestamp.year != timestamp.year:
      # the year changed...open a new file and reset our counters
      self.open_new_rainfile()
      self.yearly_total = 0.0
      self.monthly_total = 0.0
      self.daily_total = 0.0    
    # did we change months?
    elif self.last_timestamp.month != timestamp.month:
      # the month changed  reset our monthly and daily counters
      self.monthly_total = 0.0
      self.daily_total = 0.0  
    # did we change days?
    elif self.last_timestamp.day != timestamp.day:
      # the day changed, reset our daily total
      self.monthly_total = 0.0
      self.daily_total = 0.0  
    
    # save this timestamp for next time
    self.last_timestamp = timestamp
    
    return
  def new_rain_file(self, new_rain):
    """build a new rain file and initialize with the value supplied
    
    new_rain: rain amount (inches) to initialize the rain file with
    
    returns: nothing"""
    # update our current timestamp (use local time here)
    timenow = datetime.datetime.now(pytz.timezone(self.timezone))
    current_year = timenow.year
    
    # build our filename
    self.rain_filename = "{:s}\\{:d}_RainTotal.txt".format(self.datapath, current_year)
    
    # attempt to build our new file
    try:
      with open(self.rain_filename, "w") as rf:
        rf.write("# AUTOGENERATED FILE...DO NOT EDIT\n")
        rf.write("Time (UTC),Total Rain (in)\n")
    except IOError as err:
      print("Unable to build new rain file: {:s}".format(err))
      return
    
    # add our first data to the file
    self.add_new_rain_total(new_rain, new_rain)
    
    
    return
  
  def get_rain_totals(self):
    """read the current rain file and return yearly total, monthly total, 24 hour total
        # get our current timestamp (use local time here)
    timenow = datetime.datetime.now(pytz.timezone(self.timezone))
    current_year = timenow.year
    
    # build our filename
    self.rain_filename = "{:s}\\{:d}_RainTotal.txt".format(self.datapath, current_year)
    
    
if __name__ == '__main__':
  # when this file is run directly, run this code
  print(VERSION)
